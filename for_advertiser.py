from aiogram import Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, Message
from aiogram.dispatcher import FSMContext
from config import admin_id
from keyboards import get_menu_keyboard

cancel_keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
cancel_button = KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å")
cancel_keyboard.add(cancel_button)

keyboards = get_menu_keyboard()
async def add_info_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—Å—É—Ä—Å, –≥–¥–µ –±—ã–ª –ø—Ä–æ—Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞–Ω –±–æ—Ç:",
                         reply_markup=cancel_keyboard)
    await state.set_state("waiting_for_source_link")
    await state.update_data(user_id=user_id)

async def process_source_link(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboards)
        await state.finish()
        return

    source_link = message.text
    await state.update_data(source_link=source_link)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ—Å—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ä–µ–∫–ª–∞–º–∏—Ä–æ–≤–∞—Ç—å:")
    await state.set_state("waiting_for_advert_link")

async def process_advert_link(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboards)
        await state.finish()
        return

    advert_link = message.text
    await state.update_data(advert_link=advert_link)
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ, –∫–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å –∫–Ω–æ–ø–∫—É:")
    await state.set_state("waiting_for_button_name")

async def process_button_name(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å":
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=keyboards)
        await state.finish()
        return

    button_name = message.text
    await state.update_data(button_name=button_name)

    data = await state.get_data()
    user_id = data.get('user_id')
    source_link = data.get('source_link')
    advert_link = data.get('advert_link')
    button_name = data.get('button_name')

    user_name = message.from_user.username
    if not user_name:
        user_name = f"{message.from_user.first_name} {message.from_user.last_name}".strip()

    admin_message = f"ü´Å–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} (username: {user_name}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ:ü´Å\n\n" \
                    f"–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—è: {source_link}\n\n" \
                    f"–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º–∏—Ä—É–µ–º—ã–π —Ä–µ—Å—É—Ä—Å: {advert_link}\n\n" \
                    f"–ù–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏: {button_name}"

    for admin in admin_id:
        await message.bot.send_message(admin, admin_message)

    await message.answer("–û—Ç–ª–∏—á–Ω–æ, –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                         reply_markup=types.ReplyKeyboardRemove())
    await state.finish()

def register_handlers_advertiser_functions(dp: Dispatcher):
    dp.register_message_handler(add_info_command, commands=['add_info'], state="*")
    dp.register_message_handler(process_source_link, state="waiting_for_source_link")
    dp.register_message_handler(process_advert_link, state="waiting_for_advert_link")
    dp.register_message_handler(process_button_name, state="waiting_for_button_name")

